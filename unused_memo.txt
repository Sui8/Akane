activity = discord.Streaming(name='k.help でヘルプ | ' + str(bot_guilds) + ' Guilds ', url="https://www.twitch.tv/discord")

'''
# URLから再生
@slash_client.slash(
    name="play", description="音楽を再生します", options=[
    create_option(
    name="url", description="URLを指定", option_type=3, required=True)])
async def _slash_play(ctx: SlashContext, url):
    YDL_OPTIONS = {'format': 'bestaudio', 'noplaylist': 'True'}
    FFMPEG_OPTIONS = {
        'before_options':
        '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
        'options': '-vn'}
    voice = get(bot.voice_clients, guild=ctx.guild)

    if not voice.is_playing():
        with YoutubeDL(YDL_OPTIONS) as ydl:
            info = ydl.extract_info(url, download=False)
        URL = info['url']
        voice.play(FFmpegPCMAudio(URL, **FFMPEG_OPTIONS))
        voice.is_playing()
        await ctx.send(':white_check_mark: **再生を開始しました**')

# check if the bot is already playing
    else:
        await ctx.send(":x: すでに再生しています")
        return

# 再開
@slash_client.slash(name="resume", description="音楽の再生を再開します")
async def _slash_resume(ctx: SlashContext):
    voice = get(bot.voice_clients, guild=ctx.guild)

    if not voice.is_playing():
        voice.resume()
        await ctx.send('再生を再開しました')

@slash_client.slash(name="pause", description="音楽の再生を一時停止します")
async def _slash_pause(ctx: SlashContext):
    voice = get(bot.voice_clients, guild=ctx.guild)

    if voice.is_playing():
        voice.pause()
        await ctx.send('再生を一時停止しました')

@slash_client.slash(name="stop", description="音楽の再生を停止します")
async def _slash_stop(ctx: SlashContext):
    voice = get(bot.voice_clients, guild=ctx.guild)

    if voice.is_playing():
        voice.stop()
        await ctx.send('停止しています...')

'''

'''
# monochrome
@tree.command(name="monochrome", description="画像をモノクロ化します")
@discord.app_commands.describe(image="画像をアップロード")
@discord.app_commands.describe(option="オプションを指定")
@discord.app_commands.choices(option=[
    discord.app_commands.Choice(name='reverse', value=1),
])
async def monochrome(ctx: discord.Interaction, image: discord.Attachment):
  await ctx.response.defer()

  try:
    async with self.session.get(image.url) as response:
        img = await response.read()

    img = cv2.imread(img)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    dst = cv2.adaptiveThreshold(
    img, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 51, 20)

    try:
        if option.value == 1:
          dst = 255 - dst
          opt = "白黒反転"
          dt = datetime.datetime.now()
          cv2.imwrite(f'edited{dt}.jpg', dst)

    except:
        opt = "なし"
        dt = datetime.datetime.now()
        cv2.imwrite(f'edited{dt}.jpg', dst)

  except:
    embed = discord.Embed(title=":x: エラー",
                          description="変換に失敗しました。画像が壊れていないことを確認してください。",
                          color=0xff0000)
    await ctx.followup.send(embed=embed)

  else:
    embed = discord.Embed(title="変換完了",
                          description=f"オプション: {opt}")
    embed.set_image(url=f"attachment://edited{dt}.png")
    await ctx.followup.send(embed=embed)
'''

'''
#Google検索
@tree.command(name="search",description="Google検索をします")
@discord.app_commands.describe(word="検索語句を指定")
@discord.app_commands.describe(num="検索件数を指定（20件まで）")
async def search(ctx: discord.Interaction, word: str, num: int = None):
  await ctx.response.defer()
  start = time.time()
  count = 1

  if not num:
    num = 3

  if num > 20:
    num = 20

  result = GoogleSearch().search(word, num_results=num)
  result_formatted = ""

  for i in result.results:
    result_formatted = f"{result_formatted}{count}. [{i.title}]({i.url})\n"
    f"> {i.description}\n"

  stop = time.time()
  embed = discord.Embed(title=f":mag: `{word}`のGoogle検索結果  ({stop - start}秒)",
                          description=result_formatted)
  await ctx.followup.send(embed=embed)
'''

'''
#card
@tree.command(name="card", description="ユーザーカードを作成します")
async def card(ctx: discord.Interaction):
  await ctx.user.avatar.url.save("icon.png")
  icon_path = "icon.png"
  base_image_path = 'card.png'
  base_img = Image.open(base_image_path).copy()
  icon = Image.open(icon_path).convert("RGBA")

  icon = icon.resize(size=(190, 190), resample=Image.ANTIALIAS)

  mask = Image.new("L", icon.size, 0)
  draw = ImageDraw.Draw(mask)
  draw.ellipse((0, 0, icon.size[0], icon.size[1]), fill=255)
  mask = mask.filter(ImageFilter.GaussianBlur(1))
  icon.putalpha(mask)

  song_title = "{0}".format(ctx.user.name)
  font_path = "BIZ-UDGothicR.ttc"
  font_size = 57
  font_color = (255, 255, 255)
  height = 105
  width = 330
  #img = add_text_to_image(base_img, song_title, font_path,
                           font_size, font_color, height, width)

  base_img.paste(icon, (40, 40), icon)
  #base_img.add_text_to_image(base_img, song_title, font_path,
                              font_size, font_color, height, width)
  base_img.save("test.png", format="png")
  await ctx.response.send_message(file=discord.File("test.png"))
'''